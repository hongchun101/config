"--------------插件-------------------"
Plug 'nerdtree'
Plug 'vim-easymotion'
Plug 'vim-surround'
Plug 'argtextobj.vim'
Plug 'vim-exchange'
Plug 'vim-textobj-entire'
Plug 'vim-highlightedyank'
Plug 'vim-paragraph-motion'
Plug 'vim-indent-object'
Plug 'vim-matchit'
Plug 'ReplaceWithRegister'
Plug 'vim-commentary'
Plug 'vim-multiple-cursors'

set nu
set relativenumber
set incsearch
set ignorecase
set smartcase
set autoread
set cursorline
set magic
set clipboard+=unnamed
set scrolloff=1
set syntax=on
set ruler
set noeb
set notimeout
set timeoutlen=5000
set which-key
set sneak
set quickscope

let mapleader=" "
let g:WhichKey_FontSize = 22


"------------------imap-------------------"
inoremap jj <Esc>

"------------------vmap-------------------"
vnoremap = :<BS><BS><BS><BS><BS>action ReformatCode<CR>
vmap H ^
vmap L $
vnoremap <leader>em :action ExtractMethod<CR>
vnoremap <leader>iv :action IntroduceVariable<CR>
vnoremap <leader>ic :action IntroduceConstant<CR>
vnoremap <leader>if :action IntroduceField<CR>
vnoremap <leader>ip :action IntroduceParameter<CR>
vnoremap <leader>ii :action Inline<CR>
vnoremap <leader>ilp :action IntroduceFunctionParameter<CR>
vnoremap <leader>ilv :action IntroduceFunctionVariable<CR>
vnoremap <leader>y :action $EditorTranslateAction<CR>

"------------------nmap--------------"
" 单键映射
nnoremap ] :action VcsShowNextChangeMarker<CR>
nnoremap [ :action VcsShowPrevChangeMarker<CR>
nnoremap = V
nnoremap - :action OptimizeImports<CR>

" shift映射
nnoremap H ^
nnoremap L $
nnoremap R :action RenameElement<CR>

" ctrl映射
nnoremap <C-[> gT
nnoremap <C-]> gt

" art映射
nnoremap <A-[> :action Back<CR>
nnoremap <A-]> :action Forward<CR>
nnoremap <A-Right> :action NextSplitter<CR>
nnoremap <A-Left> :action PrevSplitter<CR>
nnoremap <C-Up> :action MethodUp<CR>
nnoremap <C-Down> :action MethodDown<CR>
nnoremap <C-Right> gt
nnoremap <C-Left> gT

" g命令
nnoremap gn :action NextSplitter<CR>
nnoremap gh <C-w>h<CR>
nnoremap gj <C-w>j<CR>
nnoremap gk <C-w>k<CR>
nnoremap gl <C-w>l<CR>
nnoremap ga '.
let g:WhichKeyDesc_Goto_SuperMethod="gs super method"
nnoremap gs :action GotoSuperMethod<CR>
let g:WhichKeyDesc_Goto_Implementation="gi implementation"
nnoremap gi :action GotoImplementation<CR>
let g:WhichKeyDesc_Goto_Declaration="gd declaration"
nnoremap gd :action GotoDeclaration<CR>
"nnoremap ghc :action CallHierarchy<CR>
"nnoremap ght :action TypeHierarchy<CR>
"nnoremap ghm :action MethodHierarchy<CR>
"nnoremap gp :action ParameterInfo<CR>
"nnoremap gf :action FileStructurePopup<CR>
"nnoremap gb :action JumpToLastChange<CR>

" z命令
nnoremap zk zb
nnoremap zj zt

" leader键映射
let g:WhichKeyDesc_Leader2="<leader><leader> prefix"
let g:WhichKeyDesc_Leader2_CodeMenu="<leader><leader>c codemenu"
nnoremap <leader><leader>c :action CodeMenu<CR>
let g:WhichKeyDesc_Leader2_Generate="<leader><leader>g generate"
nnoremap <leader><leader>g :action Generate<CR>
let g:WhichKeyDesc_Test="<leader><leader>t test"
nnoremap <leader><leader>t :action GotoTest<CR>

let g:WhichKeyDesc_Terminal="<leader>'"
nnoremap <leader>' :action ActivateTerminalToolWindow<CR>

let g:WhichKeyDesc_Rename="<leader>r rename"
nnoremap <leader>r :action RenameElement<CR>
let g:WhichKeyDesc_Fix="<leader>x fix"
nnoremap <leader>x :action ShowIntentionActions<CR>

let g:WhichKeyDesc_Buffer="<leader>b buffer"
let g:WhichKeyDesc_Buffer_Delete="<leader>bd close"
nnoremap <leader>bd :q<CR>
let g:WhichKeyDesc_Buffer_W="<leader>bw save"
nnoremap <leader>bw :w<CR>

let g:WhichKeyDesc_CC="<leader>c copy/close"
let g:WhichKeyDesc_CC_CopyFileName="<leader>cn copy filename"
nnoremap <leader>cn :action CopyFileName<CR>
let g:WhichKeyDesc_CC_CopyReference="<leader>cr copy reference"
nnoremap <leader>cr :action CopyReference<CR>
let g:WhichKeyDesc_CC_CopyAbsolutePath="<leader>cp copy abstract path"
nnoremap <leader>cp :action CopyAbsolutePath<CR>
let g:WhichKeyDesc_CC_CopySource="<leader>cs copy source path"
nnoremap <leader>cs :action CopySourceRootPath<CR>

let g:WhichKeyDesc_CloseAll="<leader>ca close all"
nnoremap <leader>ca :action CloseAllEditorsButActive<CR>
let g:WhichKeyDesc_CloseEditor="<leader>ce close current"
nnoremap <leader>ce :action CloseEditor<CR>
let g:WhichKeyDesc_CloseUnmodified="<leader>cu close unmodified"
nnoremap <leader>cu :action CloseAllUnmodifiedEditors<CR>

let g:WhichKeyDesc_DR="<leader>d debug"
let g:WhichKeyDesc_DR_Debug="<leader>dd debug"
nnoremap <leader>dd :action Debug<CR>
let g:WhichKeyDesc_DR_Stop="<leader>ds stop"
nnoremap <leader>ds :action Stop<CR>
let g:WhichKeyDesc_DR_Breakpoint="<leader>dv view breakpoints"
nnoremap <leader>dv :action ViewBreakpoints<CR>
let g:WhichKeyDesc_DR_Config="<leader>dc config"
nnoremap <leader>dc :action RunConfiguration<CR>
let g:WhichKeyDesc_DR_Update="<leader>du update"
nnoremap <leader>du :action UpdateRunningApplication<CR>
let g:WhichKeyDesc_Update="<leader>u update"
nnoremap <leader>u :action UpdateRunningApplication<CR>

let g:WhichKeyDesc_DR_BreakPoint="zz breakpoint"
nnoremap zz :action ToggleLineBreakpoint<CR>

"let g:WhichKeyDesc_Run="<leader>r run"
"let g:WhichKeyDesc_Run_Run="<leader>rr run"
"nnoremap <leader>rr :action run<CR>
"let g:WhichKeyDesc_Run_Coverage="<leader>rc coverage" "nnoremap <leader>rc :action RunCoverage<CR>
"let g:WhichKeyDesc_Run_Stop="<leader>rs stop"
"nnoremap <leader>rs :action Stop<CR>

"-----------------重构----------------------"
let g:WhichKeyDesc_E="<leader>e"
let g:WhichKeyDesc_I="<leader>i"
let g:WhichKeyDesc_P="<leader>p"

let g:WhichKeyDesc_Extract_Method="<leader>em method"
nnoremap <leader>em :action ExtractMethod<CR>
let g:WhichKeyDesc_Class="<leader>ec class"
nnoremap <leader>ec :action ExtractClass<CR>
let g:WhichKeyDesc_Implementation="<leader>ei implementation"
nnoremap <leader>ei :action ExtractInterface<CR>
let g:WhichKeyDesc_SuperClass="<leader>es super class"
nnoremap <leader>es :action ExtractSuperclass<CR>

let g:WhichKeyDesc_Introduce_Variable="<leader>iv variable"
nnoremap <leader>iv :action IntroduceVariable<CR>
let g:WhichKeyDesc_Introduce_Constant="<leader>ic constant"
nnoremap <leader>ic :action IntroduceConstant<CR>
let g:WhichKeyDesc_Introduce_Field="<leader>if field"
nnoremap <leader>if :action IntroduceField<CR>
let g:WhichKeyDesc_Introduce_Parameter="<leader>ip parameter"
nnoremap <leader>ip :action IntroduceParameter<CR>
let g:WhichKeyDesc_Inline="<leader>ii inline"
nnoremap <leader>ii :action Inline<CR>
let g:WhichKeyDesc_Introduce_FunctionParameter="<leader>ilp function parameter"
nnoremap <leader>ilp :action IntroduceFunctionParameter<CR>
let g:WhichKeyDesc_Introduce_FunctionVariable="<leader>ilv function variable"
nnoremap <leader>ilv :action IntroduceFunctionVariable<CR>


let g:WhichKeyDesc_MemberPushDown="<leader>pd push down"
nnoremap <leader>pd :action MemberPushDown<CR>
let g:WhichKeyDesc_MemberPullUp="<leader>pu pull up"
nnoremap <leader>pu :action MembersPullUp<CR>

"---------------------------------------------------"

let g:WhichKeyDesc_OverrideMethods="<leader>om override methods"
nnoremap <leader>om :action OverrideMethods<CR>
let g:WhichKeyDesc_ImplementMethods="<leader>im implement methods"
nnoremap <leader>im :action ImplementMethods<CR>
"nnoremap <leader>ts :action Actions.ActionsPlugin.GenerateToString<CR>

let g:WhichKeyDesc_File="<leader>f file/find"
let g:WhichKeyDesc_File_Menu="<leader>fm file menu"
nnoremap <leader>fm :action FileMenu<CR>
let g:WhichKeyDesc_File_History="<leader>fh file history"
nnoremap <leader>fh :action LocalHistory.ShowHistory<CR>
let g:WhichKeyDesc_Find_Action="<leader>fa action"
nnoremap <leader>fa :action GotoAction<CR>
let g:WhichKeyDesc_Find_Search="<leader>ff search everywhere"
nnoremap <leader>ff :action SearchEverywhere<CR>
let g:WhichKeyDesc_File_Open="<leader>fo open in explorer"
nnoremap <leader>fo :action RevealIn<CR>
let g:WhichKeyDesc_File_Move="<leader>fm file move"
nnoremap <leader>fm :action Move<CR>
let g:WhichKeyDesc_File_Copy="<leader>fc file copy"
nnoremap <leader>fc :action CopyElement<CR>


"---------------------------git---------------------------------"
let g:WhichKeyDesc_Git="<leader>g git"
let g:WhichKeyDesc_Git_Annotate="<leader>ga annotate"
nnoremap <leader>ga :action Annotate<CR>
let g:WhichKeyDesc_Git_Commit_Window="<leader>gk commit window"
nnoremap <leader>gk :action ActivateCommitToolWindow<CR>
let g:WhichKeyDesc_Git_Branch_Compare="<leader>gc compare whit branch"
nnoremap <leader>gc :action Git.CompareWithBranch<CR>
let g:WhichKeyDesc_Git_History="<leader>gh history"
nnoremap <leader>gh :action Vcs.ShowTabbedFileHistory<CR>
let g:WhichKeyDesc_Git_RollbackLines="<leader>gr rollback lines"
nnoremap <leader>gr :action Vcs.RollbackChangedLines<CR>
let g:WhichKeyDesc_Git_Log="<leader>gl log"
nnoremap <leader>gl :action Vcs.Show.Log<CR>
let g:WhichKeyDesc_Git_Branch="<leader>gb branches"
nnoremap <leader>gb :action Vcs.ShowBranches<CR>
let g:WhichKeyDesc_Git_Add="<leader>g= add"
nnoremap <leader>g= :action Git.Add<CR>
"------------------------git end-----------------------------------"

let g:WhichKeyDesc_Bookmark="<leader>h"
nnoremap <leader>h :action ToggleBookmark<CR>
"let g:WhichKeyDesc_Bookmark_Mnemonic="<leader>; mnemonic bookmark"
"nnoremap <leader>; :action ToggleBookmarkWithMnemonic<CR>
let g:WhichKeyDesc_Next_Bookmark="<leader>j"
nnoremap <leader>j :action GotoNextBookmark<CR>
let g:WhichKeyDesc_Previous_Bookmark="<leader>k"
nnoremap <leader>k :action GotoPreviousBookmark<CR>
let g:WhichKeyDesc_Show_Bookmark="<leader>l"
nnoremap <leader>l :action ShowBookmarks<CR>


let g:WhichKeyDesc_Idea="<leader>I idea"
let g:WhichKeyDesc_Idea_Setting="<leader>Is setting"
nnoremap <leader>Is :action ShowSettings<CR>
let g:WhichKeyDesc_Idea_ChangeView="<leader>Iv view mode"
nnoremap <leader>Iv :action ChangeView<CR>
let g:WhichKeyDesc_Idea_FullScreen="<leader>If full screen"
nnoremap <leader>If :action ToggleFullScreen<CR>
let g:WhichKeyDesc_Idea_Bar="<leader>Ib bar"
let g:WhichKeyDesc_Idea_MainMenu="<leader>Ibm main menu"
nnoremap <leader>Ibm :action ViewMainMenu<CR>
let g:WhichKeyDesc_Idea_Toolbar="<leader>Ibt toolbar"
nnoremap <leader>Ibt :action ViewToolBar<CR>
let g:WhichKeyDesc_Idea_StatusBar="<leader>Ibs statusbar"
nnoremap <leader>Ibs :action ViewStatusBar<CR>


let g:WhichKeyDesc_Maven="<leader>m maven"
"let g:WhichKeyDesc_Maven_Window="<leader>ma maven window"
"nnoremap <leader>ma :action ActivateMavenToolWindow<CR>
let g:WhichKeyDesc_Maven_Run="<leader>mm execute"
nnoremap <leader>mm :action Maven.ExecuteGoal<CR>
let g:WhichKeyDesc_Maven_Import="<leader>mi reimport"
nnoremap <leader>mi :action Maven.Reimport<CR>
let g:WhichKeyDesc_Maven_Search="<leader>ms search"
nnoremap <leader>ms :action coderead.maven.search<CR>


let g:WhichKeyDesc_NN="<leader>n new"
let g:WhichKeyDesc_NN_Java="<leader>nj java"
nnoremap <leader>nj :action NewClass<CR>
let g:WhichKeyDesc_NN_Dir="<leader>nd directory"
nnoremap <leader>nd :action NewDir<CR>
let g:WhichKeyDesc_NN_File="<leader>nf file"
nnoremap <leader>nf :action NewFile<CR>
"let g:WhichKeyDesc_NN_Javascript="<leader>njs javascript"
"nnoremap <leader>njs :action NewJavaScriptFile<CR>
let g:WhichKeyDesc_NN_Javascript="<leader>ns scala"
nnoremap <leader>ns :action Scala.NewClass<CR>
let g:WhichKeyDesc_NN_Html="<leader>nh html"
nnoremap <leader>nh :action NewHtmlFile<CR>
let g:WhichKeyDesc_NN_Xml="<leader>nx xml"
nnoremap <leader>nx :action NewXml<CR>
let g:WhichKeyDesc_NN_Typescript="<leader>nt typescript"
nnoremap <leader>nt :action NewTypeScriptFile<CR>
let g:WhichKeyDesc_NN_Kotlin="<leader>nk kotlin"
nnoremap <leader>nk :action Kotlin.NewFile<CR>


let g:WhichKeyDesc_Project="<leader>p project"
let g:WhichKeyDesc_Project_Close="<leader>pc close"
nnoremap <leader>pc :action CloseProject<CR>
let g:WhichKeyDesc_Project_New="<leader>pn new"
nnoremap <leader>pn :action NewProject<CR>
let g:WhichKeyDesc_Project_Import="<leader>pi import"
nnoremap <leader>pi :action ImportProject<CR>
let g:WhichKeyDesc_Project_Recent="<leader>po recent"
nnoremap <leader>po :action RecentProjectListGroup<CR>
let g:WhichKeyDesc_Project_Next="<leader>pl next"
nnoremap <leader>pl :action NextProjectWindow<CR>


let g:WhichKeyDesc_Sonar="<leader>s sonar"
"let g:WhichKeyDesc_Sonar_Tool="<leader>ss "
"nnoremap <leader>ss :action ActivateSonaRLintToolWindow<CR>
let g:WhichKeyDesc_Sonar_Analyze="<leader>ss analyze"
nnoremap <leader>ss :action SonarLint.AnalyzeFiles<CR>
let g:WhichKeyDesc_Sonar_AnalyzeAll="<leader>sa analyze all"
nnoremap <leader>sa :action SonarLint.AnalyzeAllFiles<CR>
let g:WhichKeyDesc_Sonar_AnalyzeChange="<leader>sc analyze change"
nnoremap <leader>sc :action SonarLint.AnalyzeChangedFiles<CR>

let g:WhichKeyDesc_Tool="<leader>t tool"
let g:WhichKeyDesc_Tool_JSON="<leader>tj json"
nnoremap <leader>tj :action ActivateJsonParserToolWindow<CR>
let g:WhichKeyDesc_Tool_Explorer="<leader>tc open class"
nnoremap <leader>tc :action Tool_External Tools_OpenClassInExplorer<CR>
let g:WhichKeyDesc_Tool_Nvim="<leader>tn nvim"
nnoremap <leader>tn :action Tool_External Tools_nvim<CR>
let g:WhichKeyDesc_Tool_Todo="<leader>tt todo"
nnoremap <leader>tt :action ActivateTODOToolWindow<CR>

"nnoremap <leader>pa :action ActivateProjectToolWindow<CR>
"nnoremap <leader>pp :action RecentProjectListGroup<CR>


let g:WhichKeyDesc_Vim="<leader>v vim"
let g:WhichKeyDesc_Vim_EditVimrc="<leader>ve edit vimrc"
nnoremap <leader>ve :e C:\\Users\\hongchun\\.ideavimrc<CR>
let g:WhichKeyDesc_Vim_Source="<leader>vs source"
nnoremap <leader>vs :source C:\\Users\\hongchun\\.ideavimrc<CR>

let g:WhichKeyDesc_Window="<leader>w window"
let g:WhichKeyDesc_Window_Split="<leader>ws  split"
nnoremap <leader>ws :sp<CR>
let g:WhichKeyDesc_Window_VSplit="<leader>wv vsplit"
nnoremap <leader>wv :vs<CR>
let g:WhichKeyDesc_Window_Close="<leader>wc close"
nnoremap <leader>wc <C-w>c<CR>
let g:WhichKeyDesc_Window_CloseOther="<leader>wo close other"
nnoremap <leader>wo <C-w>o<CR>
let g:WhichKeyDesc_Window_Hide="<leader>wm hide windows"
nnoremap <leader>wm :action HideAllWindows<CR>


let g:WhichKeyDesc_Translate_Replace="<leader>Y"
nnoremap <leader>Y :action $TranslateAndReplaceAction<CR>
let g:WhichKeyDesc_Translate="<leader>y translate"
nnoremap <leader>y :action $EditorTranslateAction<CR>


